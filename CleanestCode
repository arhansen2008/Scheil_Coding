%%Here we clean up all the variables and close any open figures

clearvars;
close all

%% 
%Input Variables

database = "TCHEA5";
dependent_element = "Ni";
start_temp = 2000; % in °C
step_size = 1; % in °C
final_solid_frac = 0.99;

[num, txt, raw] = xlsread('Composition.xlsx', 'Sheet1', 'A1:D2');
elementlist = string(txt);
[num, txt, raw] = xlsread('Composition.xlsx', 'Sheet1', 'A2:D2');
wt_pct = double(num);
composition = containers.Map(elementlist, wt_pct); % in wt-%
elements = string(composition.keys());
% relevant_phase = "FCC_L12";


%%
%Start TC

session = tc_toolbox.TCToolbox();

[filepath, name, ext] = fileparts(mfilename("fullpath"));
session.set_cache_folder(name + "_cache");

%Grabs the variable inputs from above:
tc_system = session.select_database_and_elements(database, [dependent_element, elements]).get_system_for_scheil_calculations();

scheil_calculation = tc_system.with_scheil_calculation()...
    .set_composition_unit(tc_toolbox.CompositionUnit.MASS_PERCENT)...%could change Mass% to tohers, type what those could be later
        .with_options(tc_toolbox.scheil.ScheilOptions()...
            .terminate_on_fraction_of_liquid_phase(1 - final_solid_frac))...%If your code is taking forever or crashing try decresaing Final Solid Fract to <1 (like 0.99)
        .set_start_temperature(start_temp + 273.15)...%Converts T °C to K
        .set_composition_unit(tc_toolbox.CompositionUnit.MASS_PERCENT);...%Do I need this twice?
        
    %Honestly I don't know why this words or is necessary, but it converts
    %the puts from earlier and makes them readable
    for element = elements
    scheil_calculation.set_composition(element, composition(element));
    end

solidification = scheil_calculation.calculate(); %makes the calc happen

%%
%Plots and Figures and Data

% plot the solidification curve including the equilibrium
scheil_curve = solidification.get_values_grouped_by_stable_phases_of(...
    tc_toolbox.ScheilQuantity.mole_fraction_of_all_solid_phases(),...
    tc_toolbox.ScheilQuantity.temperature());

%Exports the data
[mole_fraction_of_solid, temp1] = solidification.get_values_of(...
                            tc_toolbox.ScheilQuantity...
                            .mole_fraction_of_all_solid_phases(),...
                            tc_toolbox.ScheilQuantity.temperature());
                         %.mole_fraction_of_a_solid_phase("*"),... %use
                         %this one if you want ALL the data (you don't
                         %there is a lot of trailing data)
                         
for i = 1:length(temp1)
    temp1(i) = temp1(i) - 273.15; %Converts Temp back to °C
end


Data_Results = [mole_fraction_of_solid, temp1]; %creates an array for the exported data

temp_min = 1e6; %Idk why it is this value, play around
temp_max = -1e6; %Idk why it is this value, play around

% Set figure size and label things
figure('Position', [10, 10, 800, 800]); %x pos, y pos, width, height
%figure()
subplot(2,1,1);
sgtitle("Solidification of MPEA Test");
xlabel("Mole fraction of all solid phases [-]");
ylabel("Temperature [°C]");
leg3 = legend;
set(leg3, "Interpreter", "none");
hold on   

%honestly not sure how this is messing with the chart, havent played much
%with it. Some ofit is obvious labeling and data pulling, just not certain
%what exactly each line does
for k = scheil_curve.keys()
    label = k{1};  
    section = scheil_curve(label);
    plot(section.get_x(), section.get_y() - 273.15, "DisplayName", ...
        section.get_label(), "LineWidth", 2)
    
    temp_min = min(min(section.get_y()), temp_min);
    temp_max = max(max(section.get_y()), temp_max);
end
xlim([0 1]);
ylim([temp_min temp_max] - 273.15);

%% 
%Export things and save

%Exports the figure to a tif file
 pfx = 'ScheilTestClean_Figure_';
 outname = strcat(pfx, '1', '.tif'); %num2str(i) use that in place if '1' later when you expand this to multiple iterations
 exportgraphics(gcf, outname)

 % Save Data_Results to a CSV file. Currently only does it to one, but we
 % can either take Data_Results and expand it include all the data (or
 % create a new variable to do so) or make the below generate a new csv
 % with each run like we do the figure
filename = 'Data_Results_Scheil1.csv';
csvwrite(filename, Data_Results);
