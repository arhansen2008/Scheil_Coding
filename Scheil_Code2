clearvars;
close all

database = "TCHEA5";
dependent_element = "Ni";
start_temp = 2000; % in 째C
step_size = 1; % in 째C
final_solid_frac = 0.99;

[num, txt, raw] = xlsread('Composition.xlsx', 'Sheet1', 'A1:D2');
elementlist = string(txt);
[num, txt, raw] = xlsread('Composition.xlsx', 'Sheet1', 'A2:D2');
wt_pct = double(num);
composition = containers.Map(elementlist, wt_pct); % in wt-%
elements = string(composition.keys());

%composition = containers.Map({'Co', 'Mn', 'Fe', 'Ti'}, {17, 20, 22, 20}); % in wt-%  
% relevant_phase = "FCC_L12";

session = tc_toolbox.TCToolbox();

[filepath, name, ext] = fileparts(mfilename("fullpath"));
session.set_cache_folder(name + "_cache");

tc_system = session.select_database_and_elements(database, [dependent_element, elements]).get_system_for_scheil_calculations();

scheil_calculation = tc_system.with_scheil_calculation()...
    .set_composition_unit(tc_toolbox.CompositionUnit.MASS_PERCENT)...
        .with_options(tc_toolbox.scheil.ScheilOptions()...
            .terminate_on_fraction_of_liquid_phase(1 - final_solid_frac))...
        .set_start_temperature(start_temp + 273.15)...
        .set_composition_unit(tc_toolbox.CompositionUnit.MASS_PERCENT);...
        %.set_composition(elements, wt_pct);
    
    for element = elements
    scheil_calculation.set_composition(element, composition(element));
end

solidification = scheil_calculation.calculate();

% plot the solidification curve including the equilibrium
scheil_curve = solidification.get_values_grouped_by_stable_phases_of(...
    tc_toolbox.ScheilQuantity.mole_fraction_of_all_solid_phases(),...
    tc_toolbox.ScheilQuantity.temperature());

temp_min = 1e6;
temp_max = -1e6;

figure()
subplot(2,1,1);
sgtitle("Solidification of MPEA Test");
xlabel("Mole fraction of all solid phases [-]");
ylabel("Temperature [째C]");

hold on   

for k = scheil_curve.keys()
    label = k{1};  
    section = scheil_curve(label);
    plot(section.get_x(), section.get_y() - 273.15, "DisplayName", ...
        section.get_label(), "LineWidth", 2)
    
    temp_min = min(min(section.get_y()), temp_min);
    temp_max = max(max(section.get_y()), temp_max);
end
xlim([0 1]);
ylim([temp_min temp_max] - 273.15);

% % calculate the equilibrium solidification line (starting at liquidus)
%prop_calculation = tc_system.with_property_diagram_calculation();

%elements2 = py.list(string(composition.keys()));
%elements_py = py.list(elements);

% result = prop_calculation.with_axis(tc_toolbox.step_or_map_diagrams.CalculationAxis(...
%                 tc_toolbox.ThermodynamicQuantity.temperature())...
%                     .set_min(temp_min).set_max(temp_max))...
%                     .set_condition(composition.keys(),cell2mat(composition.values()) / 100)...
%                      .calculate(); %composition.keys()
                 
result = scheil_calculation.calculate();
                
[temp_eq_frac, liquid_eq_frac] = ...
    result.get_values_of(tc_toolbox.ThermodynamicQuantity.temperature(),...
        tc_toolbox.ThermodynamicQuantity.mole_fraction_of_a_phase("LIQUID"));

solid_eq_frac = 1 - liquid_eq_frac;
temp_eq_frac = temp_eq_frac - 273.15;
valid_indices = (solid_eq_frac < 1.0);  % cutting off values with 100% solid
 
plot(solid_eq_frac(valid_indices), temp_eq_frac(valid_indices), "--", "DisplayName", "Equilibrium");
leg1 = legend;
set(leg1, 'Interpreter', 'none');

% Plot the mole fraction of the solid phases separated for each
mole_frac_all_phases = ...
    solidification.get_values_grouped_by_stable_phases_of(...
        tc_toolbox.ScheilQuantity.mole_fraction_of_a_solid_phase(...
        "*"),tc_toolbox.ScheilQuantity.temperature());

subplot(2,1,2);
hold on
xlabel("Mole fraction of each solid phase [-]")
ylabel("Temperature [째C]")

for k = mole_frac_all_phases.keys()
    label = k{1};  
    section = mole_frac_all_phases(label);
    plot(section.get_x(), section.get_y() - 273.15, "DisplayName", section.get_label(), "LineWidth", 2);
end
hold off   

leg2 = legend;
set(leg2, "Interpreter", "none");

 pfx = 'ScheilTest_Figure_';
 outname = strcat(pfx, '1', '.tif'); %num2str(i)
 exportgraphics(gcf, outname)
